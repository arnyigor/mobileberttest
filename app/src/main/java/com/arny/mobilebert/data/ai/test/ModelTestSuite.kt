package com.arny.mobilebert.data.ai.test

import com.arny.mobilebert.data.ai.models.TestCase
import com.arny.mobilebert.data.ai.models.TestCategory

class ModelTestSuite {
    // 1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
    val technicalTests = listOf(
        // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        TestCase(
            text = "MVVM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            expectedTokens = 3,
            expectedImportantWords = setOf("mvvm", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"),
            category = TestCategory.TECHNICAL
        ),
        TestCase(
            text = """
            Clean Architecture –≤ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
            - Presentation layer (MVVM)
            - Domain layer (Use Cases)
            - Data layer (Repository)
            """.trimIndent(),
            expectedTokens = 12,
            expectedImportantWords = setOf("clean", "architecture", "mvvm", "repository"),
            category = TestCategory.TECHNICAL
        ),

        // Kotlin-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
        TestCase(
            text = """
            –ö–æ—Ä—É—Ç–∏–Ω—ã –≤ Kotlin:
            suspend fun loadData() = coroutineScope {
                val result = async { api.getData() }
                result.await()
            }
            """.trimIndent(),
            expectedTokens = 15,
            expectedImportantWords = setOf("–∫–æ—Ä—É—Ç–∏–Ω—ã", "suspend", "coroutinescope", "async"),
            category = TestCategory.TECHNICAL
        ),

        // Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        TestCase(
            text = """
            Lifecycle-aware ViewModels –∏—Å–ø–æ–ª—å–∑—É—é—Ç StateFlow:
            private val _uiState = MutableStateFlow<UiState>(UiState.Initial)
            val uiState: StateFlow<UiState> = _uiState.asStateFlow()
            """.trimIndent(),
            expectedTokens = 18,
            expectedImportantWords = setOf("lifecycle", "viewmodels", "stateflow"),
            category = TestCategory.TECHNICAL
        )
    )

    // 2. –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    val searchTests = listOf(
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        TestCase(
            text = "–∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å MVVM –≤ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            expectedImportantWords = setOf("mvvm", "android", "—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å"),
            category = TestCategory.SEARCH
        ),

        // –°–ª–æ–∂–Ω—ã–π –ø–æ–∏—Å–∫
        TestCase(
            text = "–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –≤ RecyclerView",
            expectedImportantWords = setOf("–º–µ–¥–ª–µ–Ω–Ω–∞—è", "recyclerview", "—Å–ø–∏—Å–æ–∫", "–∫–∞—Ä—Ç–∏–Ω–∫–∏"),
            category = TestCategory.SEARCH
        ),

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–∏—Å–∫
        TestCase(
            text = "—É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            expectedImportantWords = setOf("—É—Ç–µ—á–∫–∏", "–ø–∞–º—è—Ç—å", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
            category = TestCategory.SEARCH
        )
    )

    // 3. –°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    val mixedLanguageTests = listOf(
        TestCase(
            text = """
            @Composable
            fun MainScreen() {
                // –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                Column(modifier = Modifier.fillMaxSize()) {
                    TopBar(title = "–ì–ª–∞–≤–Ω–∞—è")
                    ContentList(items = uiState.items)
                }
            }
            """.trimIndent(),
            expectedImportantWords = setOf("composable", "mainscreen", "column", "topbar"),
            category = TestCategory.MIXED_LANGUAGE
        ),

        TestCase(
            text = "git commit -m '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–∞—à –ø—Ä–∏ deep linking'",
            expectedImportantWords = setOf("crash", "deep", "linking"),
            category = TestCategory.MIXED_LANGUAGE
        )
    )

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    val errorTests = listOf(
        TestCase(
            text = """
            E/AndroidRuntime: FATAL EXCEPTION: main
                Process: com.example.app, PID: 1234
                java.lang.IllegalStateException: Fragment UserProfileFragment not attached to an activity
                at androidx.fragment.app.Fragment.requireActivity(Fragment.java:805)
            """.trimIndent(),
            expectedImportantWords = setOf("fatal", "exception", "fragment", "illegalstateexception"),
            category = TestCategory.ERROR_HANDLING
        ),

        TestCase(
            text = "Network error: Unable to resolve host 'api.example.com'",
            expectedImportantWords = setOf("network", "error", "host"),
            category = TestCategory.ERROR_HANDLING
        )
    )

    // 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    val specialTests = listOf(
        TestCase(
            text = "compileSdk = 34",
            expectedTokens = 3,
            category = TestCategory.SPECIAL_CASES
        ),

        TestCase(
            text = "implementation 'androidx.compose.ui:ui:1.5.0'",
            expectedImportantWords = setOf("implementation", "compose", "ui"),
            category = TestCategory.SPECIAL_CASES
        ),

        TestCase(
            text = "üöÄ New Release v2.0.0 üéâ",
            expectedImportantWords = setOf("release"),
            category = TestCategory.SPECIAL_CASES
        )
    )

    // 6. –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    val performanceTests = listOf(
        TestCase(
            text = generateLongText(1000),
            expectedProcessingTime = 500,
            category = TestCategory.PERFORMANCE
        ),
        TestCase(
            text = generateRepeatingText("Android Development", 100),
            expectedTokens = 200,
        )
    )

    // 7. –¢–µ—Å—Ç—ã —Å–ª–æ–≤–∞—Ä—è
    val vocabTests = listOf(
        TestCase(
            expectedTokenSequence = listOf("[CLS]", "[SEP]", "[PAD]", "[UNK]"),
            category = TestCategory.VOCAB_TOKEN,
        ),
        TestCase(
            expectedTokenSequence = listOf("—Ç–µ–∫—Å—Ç", "—Å", "–ø—Ä–æ–±–µ–ª–∞–º–∏", "preprocessing", "embeddings", "unknownword"),
            category = TestCategory.VOCAB_COMMON,
        ),
        TestCase(
            expectedTokenSequence = listOf("##pre", "##cess", "##ing", "##pro", "##ces", "##sing"),
            category = TestCategory.VOCAB_SUBWORD,
        ),
    )

    // 7. –¢–µ—Å—Ç—ã —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
    val tokenizationTests = listOf(
        TestCase(
            text = "—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏",
            expectedTokens = 7, // 5 + 2 (CLS and SEP)
            expectedTokenSequence = listOf("[CLS]", "—Ç–µ–∫—Å—Ç", "—Å", "–ø—Ä–æ–±–µ–ª–∞–º–∏", "[SEP]"),
            expectedInputIds = listOf(101L, 1023L, 1033L, 1024L, 1025L, 0L, 0L),
            expectedMaskIds = listOf(1L, 1L, 1L, 1L, 1L, 0L, 0L),
            expectedTypeIds = listOf(0L, 0L, 0L, 0L, 0L, 0L, 0L),
            category = TestCategory.TOKENIZATION,
            description = "Basic tokenization with spaces and padding"
        ),
        TestCase(
            text = "preprocessing",
            expectedTokens = 6,
            expectedTokenSequence = listOf("[CLS]", "pre", "##pre", "##cess", "##ing", "[SEP]"),
            expectedInputIds = listOf(101L, 2345L, 3456L, 4567L, 5678L, 1025L),
            expectedMaskIds = listOf(1L, 1L, 1L, 1L, 1L, 1L),
            expectedTypeIds = listOf(0L, 0L, 0L, 0L, 0L, 0L),
            category = TestCategory.TOKENIZATION,
            description = "Tokenization of a single word with subwords"
        ),
    )

    fun getAllTests(): List<Pair<String, List<TestCase>>> = listOf(
//        "Technical Analysis" to technicalTests,
//        "Search Capabilities" to searchTests,
//        "Mixed Language Processing" to mixedLanguageTests,
//        "Error Handling" to errorTests,
//        "Special Cases" to specialTests,
//        "Performance" to performanceTests,
        "Tokenization" to tokenizationTests
    )

    private fun generateLongText(words: Int): String {
        val vocabulary = listOf(
            "Android", "Kotlin", "development", "application", "architecture",
            "testing", "performance", "optimization", "implementation", "component"
        )
        return buildString {
            repeat(words) {
                append(vocabulary.random())
                append(" ")
            }
        }.trim()
    }

    private fun generateRepeatingText(base: String, times: Int): String {
        return buildString {
            repeat(times) {
                append(base)
                append(" ")
            }
        }.trim()
    }
}